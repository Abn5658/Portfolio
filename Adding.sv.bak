module Adding(clk, reset, in1, in2, out); 
	input clk, reset; 
	input [3:0] in1, in2; 
	output [5:0] out;
	
	logic count;
	
	always_ff @(posedge clk) begin 
		if (reset)
			count <= 5'b000000;
		else
			count <= count + in1; 
			count <= count + in2;
	end 
	
	out = count;
endmodule 

module Adding_testbench(); 

	logic clk, reset; 
	logic [3:0] in1, in2; 
	output [5:0] out; 
	
	counter dut (.clk, .reset, .in1, .in2, .out);
	
	parameter clock_period = 100; 
	
	initial begin 
		clk <= 0; 
		forever #(clock_period /2) clk <= ~clk;
		
	end
	
	initial begin 
		reset <= 1; 			@(posedge clk);
		reset <= 0; inc<= 1; dec<= 0;	@(posedge clk); 
						inc<= 0; dec<= 1;  @(posedge clk);
						inc<= 0; dec<= 1;  @(posedge clk);
		for (int i = 1; i < 26; i = i + 1) begin
						inc<= 1; dec<= 0; @(posedge clk);
		end 
						@(posedge clk);
						@(posedge clk);
						
		$stop;
	end	

endmodule 